//--------
// Helpers Space
//--------
$spaces: (
  'm' : '#{$space}',
  'quarter-m' : '#{$quarter--space}',
  'half-m' : '#{$half--space}',
  'double-m' : '#{$double--space}',
  'triple-m' : '#{$triple--space}',
  'quad-m' : '#{$quad--space}',
  'none-m' : '#{$none--space}',
  
  'p' : '#{$space}',
  'quarter-p' : '#{$quarter--space}',
  'half-p' : '#{$half--space}',
  'double-p' : '#{$double--space}',
  'triple-p' : '#{$triple--space}',
  'quad-p' : '#{$quad--space}',
  'none-p' : '#{$none--space}'
) !default;

$spacesname: (
  'm' : 'margin',
  'p' : 'padding'
) !default;

$total-positions: 7;

$positions: (
  '' '',
  'top' '-t',
  'bottom' '-b',
  'left' '-l',
  'right' '-r',
  'horizontal' '-h',
  'vertical' '-v'
) !default;

$sizes: (
  '' '',
  'quarter' '-quarter',
  'half' '-half',
  'double' '-double',
  'triple' '-triple',
  'quad' '-quad'
) !default;

$null: (
  '' '',
  'none' '-none'
) !default;


//--------
// Space Responsive
//--------

@mixin spaces-responsive($type, $is_responsive) {
	
    $__flag_responsive: 'true';
    
    @each $breakpoint in $breakpoints {
      $device_name: nth($breakpoint, 1);
      $responsive: nth($breakpoint, 2);
      $__prefix: '.' + $device_name + '--';
      
      
      @if $__flag_responsive == 'true' {
        
        @if $is_responsive == 'false' {
          $__prefix: '.';
          $__flag_responsive: 'false'; //one iteration!!
          $device_name: 'all';
        }
        
        /* ----Device #{$device_name} #{$type}----*/
      
        @each $none in $null {
          $none_key: nth($none, 1);
          $none_value: nth($none, 2);
          $__counter: 0;
  
          @each $size in $sizes {
            $size_key: nth($size, 1);
            $size_value: nth($size, 2);
  
            @each $position in $positions {
              $position_key: nth($position, 1);
              $position_value: nth($position, 2);
  
              @if $__counter < $total-positions {
  
                $value: '';
                
                @if $none_key == 'none' {
                  $value: $none_key + '-' + $type;
                  $size_value: '';
                  $__counter: $__counter + 1; //Only for none property
                } @else {
  
                  @if( str-length($size_key) > 0 ) {
                    $value: $size_key + '-' + $type;
                  } @else {
                    $value: $type;
                  } 
                }
  
                #{$__prefix}#{$type}#{$size_value}#{$position_value}#{$none_value} {
                  @if $is_responsive == 'true' {
                    @media #{$responsive} {
                      @include print-value-spaces($type, $position_key, $position_value, $value);
                    }
                  } @else {
                    @include print-value-spaces($type, $position_key, $position_value, $value);
                  }
                }
              } //end if
            }
          }
        }
      }
    }
  }
  
@mixin print-value-spaces($type, $position_key, $position_value, $value) {
    
    $var_value : map-get($spaces, #{$value}) !important;
    $space_name : map-get($spacesname, #{$type});
    @if $position_key == 'horizontal'{
        $param-top : $space_name + '-left';
        $param-bottom : $space_name + '-right';
        #{$param-top}: #{$var_value}; #{$param-bottom}: #{$var_value};

    } @elseif $position_key == 'vertical' {
        $param-top : $space_name + '-top';
        $param-bottom : $space_name + '-bottom';

        #{$param-top}: #{$var_value};
        #{$param-bottom}: #{$var_value};

    } @else {

        $position_str : '';
        @if( str-length($position_key) > 0 ) {
        $position_str : '-' + $position_key;
        }
        $param : $space_name + $position_str;
        
        #{$param}: #{$var_value};
    }
}

@include spaces-responsive('m', 'false');
@include spaces-responsive('p', 'false');
@include spaces-responsive('m', 'true');
@include spaces-responsive('p', 'true');
